/*!
\page tg_usage_page Using TG objects

\tableofcontents

\section tg_usage_sec_1 Traffic Generator Attributes and Methods

All traffic generator objects have to be child of interface class \ref testlib::tg_template::GenericTG

Please read reference above for all available methods.

\note Support of some methods could be unavailable in some tg types.

\section tg_usage_sniffing Sniffing

\subsection tg_usage_sniffing_1 Usage example
\code{.py}
tg_ports = [ports[('tg1', 'sw1')][1], ports[('tg1', 'sw1')][2]]
env.tg[1].start_sniff(tg_ports, sniffing_time=10, filter_layer="STP")
#...
# Other steps in case
#...
data = env.tg[1].stop_sniff(tg_ports)
\endcode

\subsection tg_usage_sniffing_2 Description/Features
- Sniffing is performed in background.
- Stop_sniff() can be called separately for each port.
- Real packets capturing could be started with some delay. We found that different sniffer types don't start capturing right after receiving the command but with some delay. Based on experience this delay is set to 1.5 seconds. Therefore additional time sleep 1.5 seconds is introduced in start_sniff method, which are included in sniffing_time. You have to take this in to account and don't use sniffing time less then 3 seconds (5 is recommended). For benchmarking test cases you have to use special environment like IxNetwork or IxLoad.
- You can stop sniffers immediately using force=True parameter. By default stop_sniff returns control only after sniffing_time is elapsed.

\subsection tg_usage_sniffing_3 Full methods references
- \ref testlib::tg_template::GenericTG::start_sniff
- \ref testlib::tg_template::GenericTG::stop_sniff

\subsection tg_usage_sniffing_4 Packets filtering

You can check list of run-time filter layers in tg object attribute flt_patterns (\ref testlib::packet_processor::PacketProcessor::flt_patterns).

If you need more complicated filter condition you should use post processing:
\code{.py}
lfilter = lambda x: x.haslayer("STP") and x.get_lfield("STP", "rootid") == 4096
data1 = {}
for key in data.keys():
    data1[key] = filter(lfilter, data[key])
\endcode
This filter returns the selection of STP BPDU packets with the rootid field equal to 4096.

Using comprehensive lists, the previous example becomes:
\code{.py}
lfilter = lambda x: x.haslayer("STP") and x.get_lfield("STP", "rootid") == 4096
data1 = dict((key, filter(lfilter, data[key])) for key in data.keys())
\endcode

\section tg_usage_sending Sending Packets

\subsection tg_usage_sending_1 Trivial Packet Sending

Method send_stream() returns control after packet sending is finished.
\code{.py}
tg_port = ports[('tg1', 'sw1')][1]
stream_id = env.tg[1].set_stream(packet_definition, count=5, inter=2, iface=tg_port)
env.tg[1].send_stream(stream_id)
\endcode
\note You should define streams at the beginning of the test case if possible. Then in steps, use only the send_stream method. This manner of packet sending improves test case performance as far as setting stream takes additional time for execution.

\subsection tg_usage_sending_2 Threaded Packet Sending

Method start_streams() returns control immediately after call. Packets will be sent in the background.
\code{.py}
tg_port = ports[('tg1', 'sw1')][1]
stream_id_1 = env.tg[1].set_stream(packet_definition_1, count=5, inter=2, iface=tg_port)
stream_id_2 = env.tg[1].set_stream(packet_definition_2, count=15, inter=1, iface=tg_port)
env.tg[1].start_streams([stream_id_1, stream_id_2, ])
#...
# Some staff
#...
env.tg[1].stop_streams([stream_id_1, stream_id_2, ])
\endcode

\warning If you'll try to start another stream without stopping the previous one, the first streams will be re-started. This behaviour depends on TG type. Don't use it as a feature.

The set_stream method has several parameters that allow you to build a packet stream with incremented parameters.

\subsection tg_usage_sending_3 Full methods references
- \ref testlib::tg_template::GenericTG::set_stream
- \ref testlib::tg_template::GenericTG::send_stream
- \ref testlib::tg_template::GenericTG::start_streams
- \ref testlib::tg_template::GenericTG::stop_streams

\section tg_usage_sec_packets Working with Packets

Traffic Generator objects include set of methods to work with packets (please see \ref testlib::packet_processor::PacketProcessor). But you also can access packet fields directly using internal packet's methods.

\subsection tg_usage_packets_gpf Get Packet Field
- TG method
    - \ref testlib::packet_processor::PacketProcessor::get_packet_field()

\subsection tg_usage_packets_gpff Get Packet Layer in Necessary Format
- TG method
    - \ref testlib::packet_processor::PacketProcessor::get_packet_layer()

\subsection tg_usage_packets_cpf Check packet field value
- TG method
    - \ref testlib::packet_processor::PacketProcessor::check_packet_field()
    - \ref testlib::packet_processor::PacketProcessor::check_packet_field_multilayer()

\subsection tg_usage_packets_pd Get packet dictionary
Reverse packet building: pypacker packet to packet dictionary.
- TG method
    - \ref testlib::packet_processor::PacketProcessor::packet_dictionary()

\subsection tg_usage_packets_pf Packet fragmenting and assembling.
- TG method
    - \ref testlib::packet_processor::PacketProcessor::packet_fragment
    - \ref testlib::packet_processor::PacketProcessor::assemble_fragmented_packets

\section tg_usage_statistics Statistics

Traffic Generator object contains number of methods to work with statistics.

- \ref testlib::tg_template::GenericTG::clear_statistics()
- \ref testlib::tg_template::GenericTG::get_sent_frames_count()
- \ref testlib::tg_template::GenericTG::get_received_frames_count()
- \ref testlib::tg_template::GenericTG::get_filtered_frames_count()
- \ref testlib::tg_template::GenericTG::get_uds_3_frames_count()
- \ref testlib::tg_template::GenericTG::get_qos_frames_count()

\note  Different types of TG could don't have support of some counters. Read appropriate tg type docs.

*/
