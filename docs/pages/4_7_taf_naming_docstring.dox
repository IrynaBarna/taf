/*!
\page docstring_names_page Docstring

All files, classes, class methods and first level functions must have properly created docstrings. Note that 'type' syntax in Python docstrings is not defined by any standard. Thus, suggest following notations at https://www.jetbrains.com/pycharm/webhelp/type-hinting-in-pycharm.html, http://blog.jetbrains.com/pycharm/2013/02/dynamic-runtime-type-inference-in-pycharm-2-7/, http://epydoc.sourceforge.net/fields.html. This type hinting is only for TAF core library, not for testcases.


\section docstring_1 File

Each python file in TAF should contain a header  where the main information about the file is stored. Following keywords can be used:
- \b \@copyright        - put Intel copyright statement;

- \b \@file             - the name of the test suite (python file name, e.g.: \@file <test_suite_name>.py);

- \b \@summary          - the summary of the test suite;

- \b \@details          - list available test cases in the test suite.

\b Example:

\code{.py}
"""
@copyright Copyright (c) 2011 - 2016, Intel Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

@file test_vlan.py

@summary   Test Vlan implementation.

@details
Following test cases are tested:
  1. Verify that static VLAN can be created.
  2. Verify that static VLAN can be deleted and default VLAN cannot be deleted

"""

\endcode

\section docstring_2 Class

Create a class with appropriate docstring. Following keywords can be used:

- \b \@description        - describing the functionality of testing suite;

- \b \@par                - paragraph for further detailed explanation or to give examples;

- \b \@code, \b \@endcode - to mention any coding samples for the usage.

\b Example:

\code{.py}
"""
@description  General Switch object functionality.

@par Configuration examples:

@code{.json}
{
"name": "simswitch2_lxc",
"entry_type": "switch",
"instance_type": "lxc",
}
@ endcode
"""
\endcode

\section docstring_3 Function

\subsection docstring_3_1 Test Case

Create a test case function with appropriate docstring. Following keywords can be used:

- \b \@brief              - summary of the particular test case should explain actual device's behavior;

- \b \@steps              - describe the steps for particular testcase.

\b Example #1 (TAF Core library)

\code{.py}
def cli_set(self, commands, split_lines=True, expected_rc=0)
    """
    @brief: Sends a list of commands, will raise an exception on any error.
    @param commands: command string to execute
    @type commands: list[list[str]]
    @param split_lines: determine to split or not.
    @type split_lines: bool
    @param expected_rc: expected return code
    @type expected_rc: int
    @raise UIException
    @rtype: list[list[str]]
    @return: Output in sequence per list of commands
    """
\endcode

\b Example #2 (Test Case)

\code{.py}
"""	
@brief Verify that the Static entry can be removed
@steps
    -# Disable STP.
    -# Add new static entry to FDB.
@endsteps
"""
\endcode

\subsection docstring_3_2 Sub module Functions
Sub-functions inside first level functions need not contain doc strings as far as they aren't designed for any
external calls. Ignore pylint messages. In case you wish to create a docstring, following keywords can be used:
- \b \@brief              - summary of the particular function;

- \b \@param              - explanation of arguments given to a function;

- \b \@type               - explanation of argument type given to a function;

- \b \@note               - any notes for better understanding;

- \b \@code, \b \@endcode - to mention any coding samples for the usage

- \b \@rtype              - to specify return type of the function

- \b \@return             - to specify return value of the function

\b Example:

\code{.py}
"""
@brief  Check that FDB table is filled correctly 
@param  switch_instance  Switch instance to work with
@param  macaddress  MAC address for check
@note  This function check if master port should be devided into slave ports.
@return  Count of entries
@code
assert self._is_entry_added_to_fdb_table(portid=ports[('sw1', 'tg1')][1], macaddress=source_mac, vlanid=vlan_id, fdb_type="Dynamic", switch_instance=env.switch[1]) == 1
@ endcode
"""
\endcode
- Use <b> \@copydoc \<link-object\> </b> command to avoid cases where a documentation block would otherwise have to be duplicated or to extend the documentation of an inherited member. 
- In order to copy the documentation for a member of a class:

\code{.py}
def myfunction(): 
    """
    @copydoc MyClass::myfunction() 
    More documentation if required
    """
\endcode
- In case if source docstring is in other file, you can use the following syntax:

\code{.py}
def customized_get_file(): 
    """
    @copydoc testlib::cli_template::CLIGeneric::get_file()
    More documentation if required
    """
\endcode

Where testlib is file's folder, cli_template is file name, CLIGeneric is class, get_file() is function.


*/
