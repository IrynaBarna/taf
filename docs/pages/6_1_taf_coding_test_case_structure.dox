/*!
\page test_struct_page Test Case Structure

\tableofcontents

A group of test cases will be written in a python file which we call test suite. The name of the file should:
	- be unique;
	- start with \"test_\";
	- contain clear information about test suite (e.g. feature, setup, table name, etc.)

Test suite is divided into the following separate parts:
	- header;
	- imports block;
	- additional functions (optional);
	- test class;
	- internal test class methods;
	- test cases


\section test_struct_sec1 Header
Each test case python file in TAF(\"testcases\" directory) should contain a header where the main information about the file is stored.

- \b \@copyright            - copyright section.
- \b \@file                 - the name of the test suite (python file name).

\code{.py}
@file  <test_suite_name>.py
\endcode


- \b \@summary              - the summary of the test suite.
- \b \@details              - list available test cases in the test suite.

\code{.py}
@details
Following test cases are tested:
1.	<test 1 summary>
2.	<test 2 summary>
3.	..
4.	<test N summary>
\endcode


\b Example:
\code{.py}
"""
@copyright Copyright (c) 2011 - 2016, Intel Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

@file test_acl_additional.py

@summary   Test ACL Allow action with Ingress/Egress port implementation.

@details
Following test cases are tested:
1. Verify that an ingress packet is mirrored
2. Verify that an egress packet is mirrored 
"""
\endcode

\note File header should NOT contain below:
\code{.py}
#!/usr/bin/env python
\endcode


\section test_struct_sec2 Import
Import section has the following rules and sequence in TAF python code:
	- import standard module (e.g., os, time);
	- import 3rd-party libraries (e.g., pytest);
	- import framework-specific libraries (e.g., from testlib import helpers);
	- each section of above import group has to be separated by a blank line

\b Example:
\code{.py}
import time
import os

import pytest

from testlib import helpers
from testlib import loggers
\endcode

\section test_struct_sec3 Developing Suite Class

Create class with unique name per suite (with appropriate docstring).

\note Do not use any of Unittest style methods for py.test test cases. All necessary fixtures/setup/teardowns have to be defined using py.test features.

Class name should start with <b>\"Test\"</b>. Class decorators should contain the following information:
- full cross connection setup name;
- information about premium functionality (optional);
- information about features that are tested;
- list of platform in case test suite/case is platform dependent (optional);
- mark to skip pidchecker plugin (optional)

\b Example:
\code{.py}
@pytest.mark.simplified
@helpers.run_on_platforms(["lxc", ]) 
@pytest.mark.skip_pidcheck("snmpd")
@pytest.mark.acl
@pytest.mark.lag
class TestRSTPSimplified(object):
"""
@description Suite for testing custom feature. 
"""
\endcode


It's recommended to register all your markers in pytest.ini file.
\verbatim
# content of pytest.ini
[pytest]
markers =
    simplified: mark a tests which have to be execudted on "simplified" setup.
\endverbatim

The following setups are allowed: simplified, golden, and diamond.

\section test_struct_sec4 Class Methods and Variables

This section contains internal variables and help methods used in the particular test suite. 

Section should start with following comment separated with a blank line:
\code{.py}
# Attributes and Properties
\endcode

Then, class attributes should contain short inline description:
\code{.py}
tp_id = 0x9100
tagged = "Tagged"
untagged = "Untagged"
\endcode

Class method should have a docstring with following parts:
- brief summary with method description;
- parameters with name and description (optional);
- return value description (optional);
- usage examples (optional).

\section test_struct_sec5 Test Cases
This section will contain all test cases that belong to a test suite, and should start with the following comment  before/after a blank line:
\code{.py}
# Test cases
\endcode

Test case name should start with <b>\"test_\"</b> and followed by major information about the particular test case in a short form. E.g., test_qinq_01.  Not good for \"test_verify_that_...\"


Write a summary of the particular test case which should explain actual device\'s behavior.


Describe test steps of the particular test case.

\b Example:

\code{.py}
def test_bpdu_packet_format(self, env):
    """
    @brief Verify that BPDU packets sent by switch are correctly formatted.

    @steps
        -# Capture BPDU frames from the DUT
        -# Verify BPDU frames are correctly formatted
    @endsteps
    """
\endcode

\section test_struct_sec6 Test Case Code
Test case implementation is followed based on the test steps with clear comments.  
\note when logging is required, suite_logger is a mandatory name for logger


At the beginning of the test, the links should be defined for this particular test. 

\code{.py}
ports = env.get_ports([['tg1', 'sw1', 1], ])
\endcode
\note Specify devices by acronyms and number of links where the acronym consists of two parts:
    - device type: tg - traffic generator; sw - switch; hub - hub.
    - device number (numbering begins from 1).


Set admin mode to "Disabled" for all ports and then enable only necessary ones:
\code{.py}
helpers.set_all_ports_admin_disabled(env.switch)
helpers.set_ports_admin_enabled(env.switch, ports)
\endcode

\note By default these functions have the <em>wait_status</em> option equal <em>True</em>, and they check if the ports pass Down/Up operational status.

Perform actions based on test case steps using already developed helpers and embedded class methods functionality as much as possible. <b>Avoid code repetition.</b> If needed, create your own helper functions and move them into a library.

\section test_struct_sec7 Assertions

Use an \"assert\" operator to check numeric conditions or an \"if\" statement + \"pytest.fail('Some informative message')\" to check complex conditions in case additional actions are required.

\b Example:
\code{.py}
def test_something(env):
    ret_code = do_some_action(env.tg[1])
    assert ret_code == "Everithing is good", "Something goes wrong..."
    try:
        # This action could cause device crash
        do_some_stuff()
    except:
        dump_crash_info()
        message = "Test fail"
        self.suite_logger.error(message)
        pytest.fail(message)
\endcode

\note Fail messages has to be clear enough to understand failure reason and be unique (different failures have to produce different messages).

\section test_struct_sec8 Working with the "env" object

\subsection test_struct_subsection8_1 Access to Devices

\verbatim
env
  |_switch
  |_tg
  |_cross
  |_hub
  |_lhost
\endverbatim

All described env attributes are dictionaries. Device classes are accessible by index, for example:
\code{.py}
env.switch[2]
env.tg[1]
\endcode

\note <b>All indexes in env object starts from 1!!!</b>

Please read about particular device methods in appropriate dev_*.py module documentation.

\subsection test_struct_subsection8_2 Obtain connection information

The <b>get_ports</b> method returns the ports dictionary.

\code{.py}
env.get_ports(links)
env.get_ports([['tg1', 'sw1', 2], ['sw1', 'sw2', 1], ])
\endcode

\a ports contain real interface names for traffic generators and real port numbers for switches, for example:
\code{.py}
ports[('sw1', 'tg1')][1] == 24
ports[('tg1', 'sw1')][1] == "vlab0"
ports[('tg2', 'sw3')][1] == (1, 1, 10)
\endcode

In most cases you don't need to use other first level \a env methods. But you can check them here \ref testlib::common3::Environment.

\section test_struct_sec9 Switches Attributes and Methods

TAF provides a possibility to configure devices using different User Interfaces (xmlrpc, cli, linux commands). For these purposes Switch object has \"ui\" abstraction layer.

    \subsection test_struct_subsection9_1 Read Switch Properties

    \code{.py}
    switch_property = env.switch[1].ui.get_table_<table>()[row_id][param]
    row_dict = env.switch[1].ui.get_table_<table>()[row_id]
    table_content = env.switch[1].ui.get_table_<table>()
    \endcode
    <b>Where:</b>
        - table - table name, such as "ports";
        - param - string, such as "adminMode";
        - row_id - integer, row Id

    \subsection test_struct_subsection9_2 Set Switch Properties

    \code{.py}
    env.switch[1].ui.modify_*(row_list, param=value)
    env.switch[1].ui.create_*(values)
    \endcode
    <b>Where:</b>
        - row_list - list of rows where changes will be performed;
        - param - string, such as "adminMode";
        - value - new value for parameter;
        - values - list of new values that will be created

    \b Example:

    \code{.py}
    port_id = 1
    env.switch[1].ui.get_table_ports()
    vlans = [2, 3]
    env.switch[1].ui.create_vlans(vlans)
    \endcode

    \subsection test_struct_subsection9_3 Clear Config

    \code{.py}
    env.switch[1].ui.clear_config()
    \endcode

For all methods you can check \ref testlib::ui_wrapper::UiInterface.
    

\section test_struct_sec10 ONS XML-RPC Switches Attributes and Methods

    \subsection test_struct_subsection10_1 Read Switch Properties

    \code{.py}
    switch_property = env.switch[1].getprop(table, param, _id)
    row_dict = env.switch[1].getprop_row(table, row_id)
    table_content = env.switch[1].getprop_table(table)
    \endcode
    <b>Where:</b>
        - table - string, such as "Ports";
        - param - string, such as "adminMode";
        - row_id - integer, row Id

    \subsection test_struct_subsection10_2 Set Switch Properties

    \code{.py}
    env.switch[1].setprop(table, param, values)
    env.switch[1].setprop_row(table, values)
    \endcode
    <b>Where:</b>
        - table - string, such as "Ports";
        - param - string, such as "adminMode";
        - values - list containing necessary parameters for xmlrpc query, such as [1, "Up"]

    <b>Example:</b>

    \code{.py}
    port_id = 1
    env.switch[1].setprop("Ports", "adminMode", [port_id, "Up"])
    vlan_id = 2
    env.switch[1].setprop_row("Vlans", [vlan_id, "MyVLAN"])
    \endcode

    \subsection test_struct_subsection10_3 Clear Config

    \code{.py}
    env.switch[1].clearconfig()
    \endcode
    \subsection test_struct_subsection10_4 Direct XML-RPC Queries

    \code{.py}
    env.switch[2].xmlproxy.nb.Platform.getRow(1)
    \endcode

*/
